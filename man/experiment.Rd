% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_constr.R
\name{experiment}
\alias{experiment}
\title{Construct a new experiment object}
\usage{
experiment(expname = "defaultexp", outpath = NA_character_,
  repetition = 1, tickmetrics = "true", idsetup = "setup",
  idgo = "go", idfinal = NA_character_, idrunnum = NA_character_,
  runtime = 1, evalticks = seq(1, runtime, 1),
  stopcond = NA_character_, metrics = c("count turtles"),
  metrics.turtles = NA_character_, metrics.patches = NA_character_,
  metrics.links = NA_character_, variables = list(),
  constants = list(), ...)
}
\arguments{
\item{expname}{A character string defining the name of the experiment}

\item{outpath}{Path to a directory where experiment output will be stored}

\item{repetition}{A number which gives the number of repetitions for each row of the simulation design input tibble}

\item{tickmetrics}{Character string "true" runs defined metrics on each simulation tick. "false" runs metrics only after simulation is finished}

\item{idsetup}{character string or vector of character strings, defining the name of the NetLogo setup procedure}

\item{idgo}{character string or vector of character strings, defining the name of the NetLogo go procedure}

\item{idfinal}{character string or vector of character strings, defining the name of NetLogo procedures that should be run after the last tick}

\item{idrunnum}{character string, defining the name of a NetLogo global that should be used to parse the current siminputrow during model executions which can then be used for self-written output.}

\item{runtime}{number of model ticks that should be run for each simulation}

\item{evalticks}{vector of tick numbers defining when measurements are taken}

\item{stopcond}{a NetLogo reporter that reports TRUE/FALSE. If it reports TRUE the current simulation run is stopped (e.g. "not any? turtles")}

\item{metrics}{vector of strings defining valid NetLogo reporters that are taken as output measurements (e.g. c("count turtles", "count patches"))}

\item{metrics.turtles}{vector of strings defining valid turtles-own variables that are taken as output measurements (e.g. c("who", "pxcor", "pycor", "color"))}

\item{metrics.patches}{vector of strings defining valid patches-own variables that are taken as output measurements (e.g. c("pxcor", "pycor", "pcolor"))}

\item{metrics.links}{vector of strings defining valid links-own variables that are taken as output measurements (e.g. c("end1", "end2"))}

\item{variables}{a nested list of variables that are changed within a simulation design. The name of each sublist item has to be a valid global of the defined NetLogo model. Depending on the desired simdesign each list item consist of a vector of values, a min value, a max value, a step value and a qfun (e.g. list("paramA" = list(values=c(0, 0.5, 1), min=0, max=1, step=0.1, qfun="qunif")))}

\item{constants}{a list of constants that are kept constant within a simulation design. The name of each list item has to be a valid global of the defined NetLogo model (e.g. list("pNUM" = 12, "pLOGIC"="TRUE", "pSTRING"=""default""))}

\item{...}{...}
}
\value{
experiment S4 class object
}
\description{
Construct a new experiment object
}
\details{
The experiment class stores all information related to the NetLogo simulation experiment, such as runtime,
variables, constants, measurements, and more.
When setting up an experiment, it is usually attached to an already defined \link[nlrx]{nl} object (see examples).

After attaching an experiment, different simdesign helper functions can be used to attach a simdesign to the nl object \link[nlrx]{simdesign}.
The simdesign helper functions use the variable definitions from the experiment within the nl object to generate a parameter tibble for simulations.
}
\examples{
\dontrun{
# Example for Wolf Sheep Predation model from NetLogo models library:
nl@experiment <- experiment(expname="wolf-sheep",
                             outpath="C:/out/",
                             repetition=1,
                             tickmetrics="true",
                             idsetup="setup",
                             idgo="go",
                             idfinal=NA_character_,
                             idrunnum=NA_character_,
                             runtime=50,
                             evalticks=seq(40,50),
                             stopcond="not any? turtles",
                             metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
                             metrics.turtles=c("who", "pxcor", "pycor", "color"),
                             metrics.patches=c("pxcor", "pycor", "pcolor"),
                             metrics.links=c("end1","end2"),
                             variables = list('initial-number-sheep' = list(min=50, max=150, step=10, qfun="qunif"),
                 '                             initial-number-wolves' = list(min=50, max=150, step=10, qfun="qunif")),
                             constants = list("model-version" = "\\"sheep-wolves-grass\\"",
                                              "grass-regrowth-time" = 30,
                                              "sheep-gain-from-food" = 4,
                                              "wolf-gain-from-food" = 20,
                                              "sheep-reproduce" = 4,
                                              "wolf-reproduce" = 5,
                                              "show-energy?" = "false"))

}

}
